syntax = "proto3";

package protos;

service ApplicationBenchmarks{
  rpc image_processing(ImageProcessingRequest) returns (ImageProcessingResponse) {}
  rpc sentiment_analysis(SentimentAnalysisRequest) returns (SentimentAnalysisResponse) {}
  rpc speech_to_text(stream SpeechToTextRequest) returns (SpeechToTextResponse) {}
  rpc pocket_sphinx(stream SpeechToTextRequest) returns (SpeechToTextResponse) {}
  rpc image_classification_alexnet(ImageClassificationRequest) returns (ImageClassificationResponse) {}
  rpc image_classification_alexnet_gpu(ImageClassificationRequest) returns (ImageClassificationResponse) {}
  rpc image_classification_squeezenet(ImageClassificationRequest) returns (ImageClassificationResponse) {}
  rpc image_classification_squeezenet_gpu(ImageClassificationRequest) returns (ImageClassificationResponse) {}
  rpc object_detection_darknet(ObjectDetectionRequest) returns (ObjectDetectionResponse) {}
  rpc object_detection_darknet_gpu(ObjectDetectionRequest) returns (ObjectDetectionResponse) {}
  rpc aeneas(stream AudioTextRequest) returns (AudioTextResponse) {}
  rpc object_tracking(ObjectTrackingRequest) returns (ObjectTrackingResponse) {}
  rpc object_tracking_gpu(ObjectTrackingRequest) returns (ObjectTrackingResponse) {}
  rpc sentiment_aggregation(SentimentAggregationRequest) returns (SentimentAggregationResponse) {}
  rpc set_checkpoint_period(CheckpointConfig) returns (EmptyProto) {}
  rpc get_current_version(VersionRequest) returns (VersionResponse) {}
}

service MicroBenchmarks{
  rpc multiply_matrices(MatrixMultiplicationRequest) returns (MatrixMultiplicationResponse) {}
  rpc fast_fourier_transform(FastFourierRequest) returns (FastFourierResponse) {}
  rpc floating_point_sqrt(FloatingPointRequest) returns (FloatingPointResponse) {}
  rpc floating_point_sin(FloatingPointRequest) returns (FloatingPointResponse) {}
  rpc sort_file(FileSorterRequest) returns (FileSorterResponse) {}
  rpc dd_cmd(DDRequest) returns (DDResponse) {}
  rpc run_iperf(IperfRequest) returns (IperfResult) {}
}

service EdgeResourceManagement{
  rpc start_resource_tracing(EmptyProto) returns (EmptyProto) {}
  rpc start_resource_tracing_and_saving(ResourceTracingRequest) returns (EmptyProto) {}
  rpc get_resource_utilization(EmptyProto) returns (ResourceUtilizationResponse) {}
  rpc get_fault_injection_status(EmptyProto) returns (ProcessStatus) {}
  rpc get_resource_tracing_status(EmptyProto) returns (ProcessStatus) {}
  rpc inject_fault(FaultRequest) returns (EmptyProto) {}
  rpc stop_fault_injection(EmptyProto) returns (EmptyProto) {}
  rpc inject_fault_after_delay(FaultRequestWithDelay) returns (EmptyProto) {}
  rpc get_resource_logs(EmptyProto) returns (ResourceLogs) {}
}

/********************************************************
*********************************************************
START: The below messages are for micro-benchmarks
*********************************************************
********************************************************/

message MatrixMultiplicationRequest{
  Matrix matrix_1 = 1;
  Matrix matrix_2 = 2;
  int64 request_time_ms = 3;
}

message MatrixMultiplicationResponse{
  int64 request_time_ms = 1;
  int64 request_received_time_ms = 2;
  int64 response_time_ms = 3;
  int64 response_received_time_ms = 4;
  Matrix matrix = 5;
}

message FastFourierRequest{
  Row input_sequence = 1;
  int64 request_time_ms = 2;
}

message FastFourierResponse{
  Row fourier_output = 1;
  int64 request_time_ms = 2;
  int64 request_received_time_ms = 3;
  int64 response_time_ms = 4;
  int64 response_received_time_ms = 5;
}

message FloatingPointRequest{
  int64 floating_point_input = 1;
  int64 request_time_ms = 2;
}

message FloatingPointResponse{
  float floating_point_output = 1;
  int64 request_time_ms = 2;
  int64 request_received_time_ms = 3;
  int64 response_time_ms = 4;
  int64 response_received_time_ms = 5;
}

message FileSorterRequest{
  FileData file = 1;
  int64 request_time_ms = 2;
}

message FileSorterResponse{
  FileData sorted_file = 1;
  int64 request_time_ms = 2;
  int64 request_received_time_ms = 3;
  int64 response_time_ms = 4;
  int64 response_received_time_ms = 5;
}

message DDRequest{
  int64 request_time_ms = 1;
}

message DDResponse{
  int64 request_time_ms = 1;
  int64 request_received_time_ms = 2;
  int64 response_time_ms = 3;
  int64 response_received_time_ms = 4;
}

message IperfRequest {
  string hostname = 1;
  int32 port = 2;
  int32 duration = 3;
  int64 request_time_ms = 4;
}

message IperfResult {
  double bandwidth = 1;
  int64 request_time_ms = 2;
  int64 request_received_time_ms = 3;
  int64 response_time_ms = 4;
  int64 response_received_time_ms = 5;
}

message Matrix {
  repeated Row rows = 1;
}

message Row {
  repeated float values = 1;
}

message FileData {
  bytes data = 1;
}

/********************************************************
*********************************************************
END: The above messages are for micro-benchmarks
*********************************************************
********************************************************/

/********************************************************
*********************************************************
START: The below messages are for application-benchmarks
*********************************************************
********************************************************/

message ImageProcessingRequest{
  string image = 1;
  int64 request_time_ms = 2;
}

message ImageProcessingResponse{
  string resized_image = 1;
  int64 request_time_ms = 2;
  int64 request_received_time_ms = 3;
  int64 response_time_ms = 4;
  int64 response_received_time_ms = 5;
}

message SentimentAnalysisRequest{
  string input_text = 1;
  int64 request_time_ms = 2;
}

message SentimentAnalysisResponse{
  int32 sentence_count = 1;
  float polarity = 2;
  float subjectivity = 3;
  int64 request_time_ms = 4;
  int64 request_received_time_ms = 5;
  int64 response_time_ms = 6;
  int64 response_received_time_ms = 7;
}

message SpeechToTextRequest{
  bytes audio = 1;
  int64 request_time_ms = 2;
}

message SpeechToTextResponse{
  string text_conversion_output = 1;
  int64 request_time_ms = 2;
  int64 request_received_time_ms = 3;
  int64 response_time_ms = 4;
  int64 response_received_time_ms = 5;
}

message ImageClassificationRequest{
  string image = 1;
  int64 request_time_ms = 2;
}

message ImageClassificationResponse{
  int32 top_category_id = 1;
  int32 top_category_probability = 2;
  int64 request_time_ms = 3;
  int64 request_received_time_ms = 4;
  int64 response_time_ms = 5;
  int64 response_received_time_ms = 6;
}

message ObjectDetectionRequest{
  string image = 1;
  int64 request_time_ms = 2;
}

message ObjectDetectionResponse{
  int64 request_time_ms = 1;
  int64 request_received_time_ms = 2;
  int64 response_time_ms = 3;
  int64 response_received_time_ms = 4;
  repeated DetectedTrackedObject detected_objects = 5;
}

message AudioTextRequest{
  bytes audio = 1;
  string text_input = 2;
  int64 request_time_ms = 3;
}

message AudioTextResponse{
  string alignment_result = 1;
  int64 request_time_ms = 2;
  int64 request_received_time_ms = 3;
  int64 response_time_ms = 4;
  int64 response_received_time_ms = 5;
}

message ObjectTrackingRequest{
  string image = 1;
  int64 request_time_ms = 3;
}

message ObjectTrackingResponse{
  int64 request_time_ms = 1;
  int64 request_received_time_ms = 2;
  int64 response_time_ms = 3;
  int64 response_received_time_ms = 4;
  repeated DetectedTrackedObject tracked_objects = 5;
}

// ================================
// Stateful Sentiment Aggregation
// ================================

message SentimentAggregationRequest {
  string key = 1;              // topic, user, or session ID
  string input_text = 2;       // raw text input
  string req_id = 3;           // unique request identifier (UUID from orchestrator)
  int64 request_time_ms = 4;   // client-side timestamp
}

message SentimentAggregationResponse {
  string key = 1;
  string req_id = 2;
  double polarity = 3;         // aggregated polarity (-1 to +1)
  double subjectivity = 4;     // aggregated subjectivity (0 to 1)
  int64 state_version = 5;     // monotonic version counter
  bool applied = 6;            // false if duplicate req_id was ignored
  int64 request_time_ms = 7;   // original request time
  int64 request_received_time_ms = 8;
  int64 response_time_ms = 9;
  int64 response_received_time_ms = 10;
}

message CheckpointConfig {
  int32 seconds = 1;
}

message VersionRequest {
  string key = 1;
}

message VersionResponse {
  string key = 1;
  int64 state_version = 2;
}

/********************************************************
*********************************************************
END: The above messages are for application-benchmarks
*********************************************************
********************************************************/
message ResourceTracingRequest {
  int32 timeout = 1;
}

message ResourceUtilizationResponse{
  float average_cpu_utilization = 1;
  float average_memory_utilization = 2;
  float average_disk_utilization = 3;
  float average_network_received_speed = 4;
  float average_network_transmitted_speed = 5;
  float average_power_consumption = 6;
}

message FaultRequest{
  string fault_command = 1;
  string fault_config = 2;
}

message FaultRequestWithDelay{
  string fault_command = 1;
  string fault_config = 2;
  int32 delay = 3;
}

message ResourceLogs{
  FileData cpu_log = 1;
  FileData memory_log = 2;
  FileData io_log = 3;
  FileData network_log = 4;
  repeated int64 fault_injection_start_times_ms = 5;
  repeated int64 fault_injection_stop_times_ms = 6;
  repeated int64 temperature_timestamps_ms = 7;
  repeated float cpu_temperatures = 8;
}

message ProcessStatus {
  bool is_finished = 1;
}

message DetectedTrackedObject {
  int32 track_id = 1;
  string clazz = 2;
  int32 x_min = 3;
  int32 x_max = 4;
  int32 y_min = 5;
  int32 y_max = 6;
}

message EmptyProto {}
